services:
  app:
    build: .
    env_file: .env
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - ./.env:/app/.env:ro
      - /app/.venv
      - /app/__pycache__
      - /app/.pytest_cache
    environment:
      - PYTHONPATH=/app
      - WATCHFILES_FORCE_POLLING=true
      - RUNNING_IN_DOCKER=true
    depends_on:
      - db
      - redis
    restart: unless-stopped
    command: ["sh", "-c", "python scripts/run_migrations.py && uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app"]
  db:
    image: ankane/pgvector:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: slackbot
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  # High-priority worker for user queries
  celery-query-worker:
    build: .
    env_file: .env
    volumes:
      - .:/app
      - ./.env:/app/.env:ro
      - /app/.venv
      - /app/__pycache__
      - /app/.pytest_cache
    environment:
      - PYTHONPATH=/app
      - RUNNING_IN_DOCKER=true
    depends_on:
      - db
      - redis
    restart: unless-stopped
    command: ["celery", "-A", "app.workers.simplified_celery_app", "worker", "--loglevel=info", "--queues=queries", "--concurrency=2", "--prefetch-multiplier=1"]

  # Background worker for knowledge extraction and message processing
  celery-background-worker:
    build: .
    env_file: .env
    volumes:
      - .:/app
      - ./.env:/app/.env:ro
      - /app/.venv
      - /app/__pycache__
      - /app/.pytest_cache
    environment:
      - PYTHONPATH=/app
      - RUNNING_IN_DOCKER=true
    depends_on:
      - db
      - redis
    restart: unless-stopped
    command: ["celery", "-A", "app.workers.simplified_celery_app", "worker", "--loglevel=info", "--queues=background", "--concurrency=1"]

  celery-beat:
    build: .
    env_file: .env
    volumes:
      - .:/app
      - ./.env:/app/.env:ro
      - /app/.venv
      - /app/__pycache__
      - /app/.pytest_cache
    environment:
      - PYTHONPATH=/app
      - RUNNING_IN_DOCKER=true
    depends_on:
      - db
      - redis
    restart: unless-stopped
    command: ["celery", "-A", "app.workers.simplified_celery_app", "beat", "--loglevel=info"]

volumes:
  db_data:
  redis_data:
